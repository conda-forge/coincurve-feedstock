diff --git a/_cffi_build/build.py b/_cffi_build/build.py
index f478fb5..6aed55a 100644
--- a/_cffi_build/build.py
+++ b/_cffi_build/build.py
@@ -13,7 +13,7 @@ def _mk_ffi(sources, name='_libsecp256k1', **kwargs):
     code = []
 
     for source in sources:
-        with open(os.path.join(here, source.h)) as h:
+        with open(os.path.join(here, source.h), 'rt') as h:
             _ffi.cdef(h.read())
         code.append(source.include)
 
@@ -29,8 +29,6 @@ modules = [
     Source('secp256k1_extrakeys.h', '#include <secp256k1_extrakeys.h>'),
     Source('secp256k1_recovery.h', '#include <secp256k1_recovery.h>'),
     Source('secp256k1_schnorrsig.h', '#include <secp256k1_schnorrsig.h>'),
-    Source('secp256k1_ellswift.h', '#include <secp256k1_ellswift.h>'),
-    Source('secp256k1_preallocated.h', '#include <secp256k1_preallocated.h>'),
 ]
 
 ffi = _mk_ffi(modules, libraries=['secp256k1'])
diff --git a/_cffi_build/build_shared.py b/_cffi_build/build_shared.py
deleted file mode 100644
index 4ad89d3..0000000
--- a/_cffi_build/build_shared.py
+++ /dev/null
@@ -1,84 +0,0 @@
-import argparse
-import logging
-import os
-from collections import namedtuple
-from typing import List
-
-from cffi import FFI
-
-logging.basicConfig(level=logging.INFO)
-
-here = os.path.dirname(os.path.abspath(__file__))
-
-Source = namedtuple('Source', ('h', 'include'))
-
-
-def gather_sources_from_directory(directory: str) -> List[Source]:
-    """
-    Gather source files from a given directory.
-
-    :param directory: The directory where source files are located.
-    :return: A list of Source namedtuples.
-    """
-    sources = []
-    for filename in os.listdir(directory):
-        if filename.endswith('.h'):
-            include_line = f'#include <{filename}>'
-            sources.append(Source(filename, include_line))
-    return sorted(sources)
-
-
-define_static_lib = """
-#if defined(_WIN32)
-#   define SECP256K1_STATIC 1
-#   define SECP256K1_API extern __declspec(dllexport)
-#endif
-"""
-
-define_shared_lib = """
-#if defined(_WIN32)
-#   define SECP256K1_API extern __declspec(dllimport)
-#endif
-"""
-
-
-def mk_ffi(sources: List[Source],
-           static_lib: str = '0',
-           name: str = '_libsecp256k1') -> FFI:
-    """
-    Create an FFI object.
-
-    :param sources: A list of Source namedtuples.
-    :param libraries: A list of libraries to link against.
-    :param static_lib: Whether to generate a static lib in Windows.
-    :param name: The name of the FFI object.
-    :return: An FFI object.
-    """
-    _ffi = FFI()
-    code = [define_static_lib] if static_lib == '1' else [define_shared_lib]
-
-    for source in sources:
-        with open(os.path.join(here, source.h)) as h:
-            logging.info(f'   Including {source.h}...')
-            c_header = h.read().replace('SECP256K1_API', '')
-            _ffi.cdef(c_header)
-
-        code.append(source.include)
-
-    code.append('#define PY_USE_BUNDLED')
-    _ffi.set_source(name, '\n'.join(code))
-
-    return _ffi
-
-
-if __name__ == '__main__':
-    logging.info('Starting CFFI build process...')
-    parser = argparse.ArgumentParser(description='Generate C code using CFFI.')
-    parser.add_argument('c_file', help='Generated C code filename.')
-    parser.add_argument('static_lib', help='Generate static lib in Windows.', default=False)
-    args = parser.parse_args()
-
-    modules = gather_sources_from_directory(here)
-    ffi = mk_ffi(modules, args.static_lib)
-    ffi.emit_c_code(args.c_file)
-    logging.info(f'   Generated C code: {args.c_file}')
diff --git a/_cffi_build/secp256k1.h b/_cffi_build/secp256k1.h
index 5c5f1b8..0f9d7e1 100644
--- a/_cffi_build/secp256k1.h
+++ b/_cffi_build/secp256k1.h
@@ -1,11 +1,13 @@
 typedef struct secp256k1_context_struct secp256k1_context;
-typedef struct secp256k1_scratch_space_struct secp256k1_scratch_space;
+
 typedef struct {
     unsigned char data[64];
 } secp256k1_pubkey;
+
 typedef struct {
     unsigned char data[64];
 } secp256k1_ecdsa_signature;
+
 typedef int (*secp256k1_nonce_function)(
     unsigned char *nonce32,
     const unsigned char *msg32,
@@ -14,164 +16,155 @@ typedef int (*secp256k1_nonce_function)(
     void *data,
     unsigned int attempt
 );
+
 #define SECP256K1_FLAGS_TYPE_MASK ...
 #define SECP256K1_FLAGS_TYPE_CONTEXT ...
 #define SECP256K1_FLAGS_TYPE_COMPRESSION ...
 #define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY ...
 #define SECP256K1_FLAGS_BIT_CONTEXT_SIGN ...
-#define SECP256K1_FLAGS_BIT_CONTEXT_DECLASSIFY ...
 #define SECP256K1_FLAGS_BIT_COMPRESSION ...
-#define SECP256K1_CONTEXT_NONE ...
+
 #define SECP256K1_CONTEXT_VERIFY ...
 #define SECP256K1_CONTEXT_SIGN ...
-#define SECP256K1_CONTEXT_DECLASSIFY ...
+#define SECP256K1_CONTEXT_NONE ...
+
 #define SECP256K1_EC_COMPRESSED ...
 #define SECP256K1_EC_UNCOMPRESSED ...
-#define SECP256K1_TAG_PUBKEY_EVEN ...
-#define SECP256K1_TAG_PUBKEY_ODD ...
-#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED ...
-extern const secp256k1_context *secp256k1_context_static;
-extern void secp256k1_selftest(void);
-extern secp256k1_context *secp256k1_context_create(
+
+secp256k1_context* secp256k1_context_create(
     unsigned int flags
 );
-extern secp256k1_context *secp256k1_context_clone(
-    const secp256k1_context *ctx
-);
-extern void secp256k1_context_destroy(
-    secp256k1_context *ctx
-);
-extern void secp256k1_context_set_illegal_callback(
-    secp256k1_context *ctx,
-    void (*fun)(const char *message, void *data),
-    const void *data
-);
-extern void secp256k1_context_set_error_callback(
-    secp256k1_context *ctx,
-    void (*fun)(const char *message, void *data),
-    const void *data
-);
-extern secp256k1_scratch_space *secp256k1_scratch_space_create(
-    const secp256k1_context *ctx,
-    size_t size
-);
-extern void secp256k1_scratch_space_destroy(
-    const secp256k1_context *ctx,
-    secp256k1_scratch_space *scratch
-);
-extern int secp256k1_ec_pubkey_parse(
-    const secp256k1_context *ctx,
-    secp256k1_pubkey *pubkey,
+
+secp256k1_context* secp256k1_context_clone(
+    const secp256k1_context* ctx
+);
+
+void secp256k1_context_destroy(
+    secp256k1_context* ctx
+);
+
+void secp256k1_context_set_illegal_callback(
+    secp256k1_context* ctx,
+    void (*fun)(const char* message, void* data),
+    const void* data
+);
+
+void secp256k1_context_set_error_callback(
+    secp256k1_context* ctx,
+    void (*fun)(const char* message, void* data),
+    const void* data
+);
+
+int secp256k1_ec_pubkey_parse(
+    const secp256k1_context* ctx,
+    secp256k1_pubkey* pubkey,
     const unsigned char *input,
     size_t inputlen
 );
-extern int secp256k1_ec_pubkey_serialize(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_serialize(
+    const secp256k1_context* ctx,
     unsigned char *output,
     size_t *outputlen,
-    const secp256k1_pubkey *pubkey,
+    const secp256k1_pubkey* pubkey,
     unsigned int flags
 );
-extern int secp256k1_ec_pubkey_cmp(
-    const secp256k1_context *ctx,
-    const secp256k1_pubkey *pubkey1,
-    const secp256k1_pubkey *pubkey2
-);
-extern int secp256k1_ecdsa_signature_parse_compact(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_signature *sig,
+
+int secp256k1_ecdsa_signature_parse_compact(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_signature* sig,
     const unsigned char *input64
 );
-extern int secp256k1_ecdsa_signature_parse_der(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_signature *sig,
+
+int secp256k1_ecdsa_signature_parse_der(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_signature* sig,
     const unsigned char *input,
     size_t inputlen
 );
-extern int secp256k1_ecdsa_signature_serialize_der(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_signature_serialize_der(
+    const secp256k1_context* ctx,
     unsigned char *output,
     size_t *outputlen,
-    const secp256k1_ecdsa_signature *sig
+    const secp256k1_ecdsa_signature* sig
 );
-extern int secp256k1_ecdsa_signature_serialize_compact(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_signature_serialize_compact(
+    const secp256k1_context* ctx,
     unsigned char *output64,
-    const secp256k1_ecdsa_signature *sig
+    const secp256k1_ecdsa_signature* sig
 );
-extern int secp256k1_ecdsa_verify(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_verify(
+    const secp256k1_context* ctx,
     const secp256k1_ecdsa_signature *sig,
-    const unsigned char *msghash32,
+    const unsigned char *msg32,
     const secp256k1_pubkey *pubkey
 );
-extern int secp256k1_ecdsa_signature_normalize(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_signature_normalize(
+    const secp256k1_context* ctx,
     secp256k1_ecdsa_signature *sigout,
     const secp256k1_ecdsa_signature *sigin
 );
+
 extern const secp256k1_nonce_function secp256k1_nonce_function_rfc6979;
+
 extern const secp256k1_nonce_function secp256k1_nonce_function_default;
-extern int secp256k1_ecdsa_sign(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_sign(
+    const secp256k1_context* ctx,
     secp256k1_ecdsa_signature *sig,
-    const unsigned char *msghash32,
+    const unsigned char *msg32,
     const unsigned char *seckey,
     secp256k1_nonce_function noncefp,
     const void *ndata
 );
-extern int secp256k1_ec_seckey_verify(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_seckey_verify(
+    const secp256k1_context* ctx,
     const unsigned char *seckey
 );
-extern int secp256k1_ec_pubkey_create(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_create(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
     const unsigned char *seckey
 );
-extern int secp256k1_ec_seckey_negate(
-    const secp256k1_context *ctx,
-    unsigned char *seckey
-);
-extern int secp256k1_ec_pubkey_negate(
-    const secp256k1_context *ctx,
-    secp256k1_pubkey *pubkey
-);
-extern int secp256k1_ec_seckey_tweak_add(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_privkey_tweak_add(
+    const secp256k1_context* ctx,
     unsigned char *seckey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_ec_pubkey_tweak_add(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_tweak_add(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_ec_seckey_tweak_mul(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_privkey_tweak_mul(
+    const secp256k1_context* ctx,
     unsigned char *seckey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_ec_pubkey_tweak_mul(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_tweak_mul(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_context_randomize(
-    secp256k1_context *ctx,
+
+int secp256k1_context_randomize(
+    secp256k1_context* ctx,
     const unsigned char *seed32
 );
-extern int secp256k1_ec_pubkey_combine(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_combine(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *out,
-    const secp256k1_pubkey * const *ins,
+    const secp256k1_pubkey * const * ins,
     size_t n
 );
-extern int secp256k1_tagged_sha256(
-    const secp256k1_context *ctx,
-    unsigned char *hash32,
-    const unsigned char *tag,
-    size_t taglen,
-    const unsigned char *msg,
-    size_t msglen
-);
diff --git a/_cffi_build/secp256k1_ecdh.h b/_cffi_build/secp256k1_ecdh.h
index f9a0748..1a61c73 100644
--- a/_cffi_build/secp256k1_ecdh.h
+++ b/_cffi_build/secp256k1_ecdh.h
@@ -1,16 +1,8 @@
-typedef int (*secp256k1_ecdh_hash_function)(
-  unsigned char *output,
-  const unsigned char *x32,
-  const unsigned char *y32,
-  void *data
-);
-extern const secp256k1_ecdh_hash_function secp256k1_ecdh_hash_function_sha256;
-extern const secp256k1_ecdh_hash_function secp256k1_ecdh_hash_function_default;
-extern int secp256k1_ecdh(
-  const secp256k1_context *ctx,
-  unsigned char *output,
+int secp256k1_ecdh(
+  const secp256k1_context* ctx,
+  unsigned char *result,
   const secp256k1_pubkey *pubkey,
-  const unsigned char *seckey,
-  secp256k1_ecdh_hash_function hashfp,
+  const unsigned char *privkey,
+  void *hashfp,
   void *data
-) ;
+);
diff --git a/_cffi_build/secp256k1_ellswift.h b/_cffi_build/secp256k1_ellswift.h
deleted file mode 100644
index 25542c6..0000000
--- a/_cffi_build/secp256k1_ellswift.h
+++ /dev/null
@@ -1,36 +0,0 @@
-typedef int (*secp256k1_ellswift_xdh_hash_function)(
-    unsigned char *output,
-    const unsigned char *x32,
-    const unsigned char *ell_a64,
-    const unsigned char *ell_b64,
-    void *data
-);
-extern const secp256k1_ellswift_xdh_hash_function secp256k1_ellswift_xdh_hash_function_prefix;
-extern const secp256k1_ellswift_xdh_hash_function secp256k1_ellswift_xdh_hash_function_bip324;
-extern int secp256k1_ellswift_encode(
-    const secp256k1_context *ctx,
-    unsigned char *ell64,
-    const secp256k1_pubkey *pubkey,
-    const unsigned char *rnd32
-) ;
-extern int secp256k1_ellswift_decode(
-    const secp256k1_context *ctx,
-    secp256k1_pubkey *pubkey,
-    const unsigned char *ell64
-) ;
-extern int secp256k1_ellswift_create(
-    const secp256k1_context *ctx,
-    unsigned char *ell64,
-    const unsigned char *seckey32,
-    const unsigned char *auxrnd32
-) ;
-extern int secp256k1_ellswift_xdh(
-  const secp256k1_context *ctx,
-  unsigned char *output,
-  const unsigned char *ell_a64,
-  const unsigned char *ell_b64,
-  const unsigned char *seckey32,
-  int party,
-  secp256k1_ellswift_xdh_hash_function hashfp,
-  void *data
-) ;
diff --git a/_cffi_build/secp256k1_extrakeys.h b/_cffi_build/secp256k1_extrakeys.h
index 02dd798..36d4c57 100644
--- a/_cffi_build/secp256k1_extrakeys.h
+++ b/_cffi_build/secp256k1_extrakeys.h
@@ -1,66 +1,78 @@
 typedef struct {
     unsigned char data[64];
 } secp256k1_xonly_pubkey;
+
 typedef struct {
     unsigned char data[96];
 } secp256k1_keypair;
-extern int secp256k1_xonly_pubkey_parse(
-    const secp256k1_context *ctx,
-    secp256k1_xonly_pubkey *pubkey,
+
+int secp256k1_xonly_pubkey_parse(
+    const secp256k1_context* ctx,
+    secp256k1_xonly_pubkey* pubkey,
     const unsigned char *input32
-) ;
-extern int secp256k1_xonly_pubkey_serialize(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_xonly_pubkey_serialize(
+    const secp256k1_context* ctx,
     unsigned char *output32,
-    const secp256k1_xonly_pubkey *pubkey
-) ;
-extern int secp256k1_xonly_pubkey_cmp(
-    const secp256k1_context *ctx,
-    const secp256k1_xonly_pubkey *pk1,
-    const secp256k1_xonly_pubkey *pk2
-) ;
-extern int secp256k1_xonly_pubkey_from_pubkey(
-    const secp256k1_context *ctx,
+    const secp256k1_xonly_pubkey* pubkey
+);
+
+int secp256k1_xonly_pubkey_cmp(
+    const secp256k1_context* ctx,
+    const secp256k1_xonly_pubkey* pk1,
+    const secp256k1_xonly_pubkey* pk2
+);
+
+int secp256k1_xonly_pubkey_from_pubkey(
+    const secp256k1_context* ctx,
     secp256k1_xonly_pubkey *xonly_pubkey,
     int *pk_parity,
     const secp256k1_pubkey *pubkey
-) ;
-extern int secp256k1_xonly_pubkey_tweak_add(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_xonly_pubkey_tweak_add(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *output_pubkey,
     const secp256k1_xonly_pubkey *internal_pubkey,
     const unsigned char *tweak32
-) ;
-extern int secp256k1_xonly_pubkey_tweak_add_check(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_xonly_pubkey_tweak_add_check(
+    const secp256k1_context* ctx,
     const unsigned char *tweaked_pubkey32,
     int tweaked_pk_parity,
     const secp256k1_xonly_pubkey *internal_pubkey,
     const unsigned char *tweak32
-) ;
-extern int secp256k1_keypair_create(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_keypair_create(
+    const secp256k1_context* ctx,
     secp256k1_keypair *keypair,
     const unsigned char *seckey
-) ;
-extern int secp256k1_keypair_sec(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_keypair_sec(
+    const secp256k1_context* ctx,
     unsigned char *seckey,
     const secp256k1_keypair *keypair
-) ;
-extern int secp256k1_keypair_pub(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_keypair_pub(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
     const secp256k1_keypair *keypair
-) ;
-extern int secp256k1_keypair_xonly_pub(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_keypair_xonly_pub(
+    const secp256k1_context* ctx,
     secp256k1_xonly_pubkey *pubkey,
     int *pk_parity,
     const secp256k1_keypair *keypair
-) ;
-extern int secp256k1_keypair_xonly_tweak_add(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_keypair_xonly_tweak_add(
+    const secp256k1_context* ctx,
     secp256k1_keypair *keypair,
     const unsigned char *tweak32
-) ;
+);
diff --git a/_cffi_build/secp256k1_preallocated.h b/_cffi_build/secp256k1_preallocated.h
deleted file mode 100644
index a4a39bb..0000000
--- a/_cffi_build/secp256k1_preallocated.h
+++ /dev/null
@@ -1,17 +0,0 @@
-extern size_t secp256k1_context_preallocated_size(
-    unsigned int flags
-) ;
-extern secp256k1_context *secp256k1_context_preallocated_create(
-    void *prealloc,
-    unsigned int flags
-) ;
-extern size_t secp256k1_context_preallocated_clone_size(
-    const secp256k1_context *ctx
-) ;
-extern secp256k1_context *secp256k1_context_preallocated_clone(
-    const secp256k1_context *ctx,
-    void *prealloc
-) ;
-extern void secp256k1_context_preallocated_destroy(
-    secp256k1_context *ctx
-) ;
diff --git a/_cffi_build/secp256k1_recovery.h b/_cffi_build/secp256k1_recovery.h
index f650e60..5319cb7 100644
--- a/_cffi_build/secp256k1_recovery.h
+++ b/_cffi_build/secp256k1_recovery.h
@@ -1,34 +1,39 @@
 typedef struct {
     unsigned char data[65];
 } secp256k1_ecdsa_recoverable_signature;
-extern int secp256k1_ecdsa_recoverable_signature_parse_compact(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_recoverable_signature *sig,
+
+int secp256k1_ecdsa_recoverable_signature_parse_compact(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_recoverable_signature* sig,
     const unsigned char *input64,
     int recid
-) ;
-extern int secp256k1_ecdsa_recoverable_signature_convert(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_signature *sig,
-    const secp256k1_ecdsa_recoverable_signature *sigin
-) ;
-extern int secp256k1_ecdsa_recoverable_signature_serialize_compact(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_ecdsa_recoverable_signature_convert(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_signature* sig,
+    const secp256k1_ecdsa_recoverable_signature* sigin
+);
+
+int secp256k1_ecdsa_recoverable_signature_serialize_compact(
+    const secp256k1_context* ctx,
     unsigned char *output64,
     int *recid,
-    const secp256k1_ecdsa_recoverable_signature *sig
-) ;
-extern int secp256k1_ecdsa_sign_recoverable(
-    const secp256k1_context *ctx,
+    const secp256k1_ecdsa_recoverable_signature* sig
+);
+
+int secp256k1_ecdsa_sign_recoverable(
+    const secp256k1_context* ctx,
     secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msghash32,
+    const unsigned char *msg32,
     const unsigned char *seckey,
     secp256k1_nonce_function noncefp,
     const void *ndata
-) ;
-extern int secp256k1_ecdsa_recover(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_ecdsa_recover(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
     const secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msghash32
-) ;
+    const unsigned char *msg32
+);
diff --git a/_cffi_build/secp256k1_schnorrsig.h b/_cffi_build/secp256k1_schnorrsig.h
index 9762e88..137022f 100644
--- a/_cffi_build/secp256k1_schnorrsig.h
+++ b/_cffi_build/secp256k1_schnorrsig.h
@@ -8,31 +8,44 @@ typedef int (*secp256k1_nonce_function_hardened)(
     size_t algolen,
     void *data
 );
+
 extern const secp256k1_nonce_function_hardened secp256k1_nonce_function_bip340;
+
 typedef struct {
     unsigned char magic[4];
     secp256k1_nonce_function_hardened noncefp;
-    void *ndata;
+    void* ndata;
 } secp256k1_schnorrsig_extraparams;
-extern int secp256k1_schnorrsig_sign32(
-    const secp256k1_context *ctx,
+
+int secp256k1_schnorrsig_sign(
+    const secp256k1_context* ctx,
     unsigned char *sig64,
     const unsigned char *msg32,
     const secp256k1_keypair *keypair,
     const unsigned char *aux_rand32
-) ;
-extern int secp256k1_schnorrsig_sign_custom(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_schnorrsig_sign32(
+    const secp256k1_context* ctx,
+    unsigned char *sig64,
+    const unsigned char *msg32,
+    const secp256k1_keypair *keypair,
+    const unsigned char *aux_rand32
+);
+
+int secp256k1_schnorrsig_sign_custom(
+    const secp256k1_context* ctx,
     unsigned char *sig64,
     const unsigned char *msg,
     size_t msglen,
     const secp256k1_keypair *keypair,
     secp256k1_schnorrsig_extraparams *extraparams
-) ;
-extern int secp256k1_schnorrsig_verify(
-    const secp256k1_context *ctx,
+);
+
+int secp256k1_schnorrsig_verify(
+    const secp256k1_context* ctx,
     const unsigned char *sig64,
     const unsigned char *msg,
     size_t msglen,
     const secp256k1_xonly_pubkey *pubkey
-) ;
+);
diff --git a/coincurve/_windows_libsecp256k1.py b/coincurve/_windows_libsecp256k1.py
index 07b0796..34115a7 100644
--- a/coincurve/_windows_libsecp256k1.py
+++ b/coincurve/_windows_libsecp256k1.py
@@ -4,7 +4,6 @@ from cffi import FFI
 
 BASE_DEFINITIONS = """
 typedef struct secp256k1_context_struct secp256k1_context;
-typedef struct secp256k1_scratch_space_struct secp256k1_scratch_space;
 
 typedef struct {
     unsigned char data[64];
@@ -23,104 +22,95 @@ typedef int (*secp256k1_nonce_function)(
     unsigned int attempt
 );
 
-#define SECP256K1_FLAGS_TYPE_MASK ...
-#define SECP256K1_FLAGS_TYPE_CONTEXT ...
-#define SECP256K1_FLAGS_TYPE_COMPRESSION ...
-#define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY ...
-#define SECP256K1_FLAGS_BIT_CONTEXT_SIGN ...
-#define SECP256K1_FLAGS_BIT_CONTEXT_DECLASSIFY ...
-#define SECP256K1_FLAGS_BIT_COMPRESSION ...
+#define SECP256K1_FLAGS_TYPE_MASK 255
+#define SECP256K1_FLAGS_TYPE_CONTEXT 1
+#define SECP256K1_FLAGS_TYPE_COMPRESSION 2
 
-#define SECP256K1_CONTEXT_NONE ...
+#define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY 256
+#define SECP256K1_FLAGS_BIT_CONTEXT_SIGN 512
+#define SECP256K1_FLAGS_BIT_COMPRESSION 256
 
-#define SECP256K1_CONTEXT_VERIFY ...
-#define SECP256K1_CONTEXT_SIGN ...
+#define SECP256K1_CONTEXT_VERIFY 257
+#define SECP256K1_CONTEXT_SIGN 513
+#define SECP256K1_CONTEXT_NONE 1
 
-#define SECP256K1_CONTEXT_DECLASSIFY ...
+#define SECP256K1_EC_COMPRESSED 258
+#define SECP256K1_EC_UNCOMPRESSED 2
 
-#define SECP256K1_EC_COMPRESSED ...
-#define SECP256K1_EC_UNCOMPRESSED ...
-
-#define SECP256K1_TAG_PUBKEY_EVEN ...
-#define SECP256K1_TAG_PUBKEY_ODD ...
-#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED ...
-extern const secp256k1_context *secp256k1_context_static;
-extern void secp256k1_selftest(void);
-extern secp256k1_context *secp256k1_context_create(
+secp256k1_context* secp256k1_context_create(
     unsigned int flags
 );
-extern secp256k1_context *secp256k1_context_clone(
-    const secp256k1_context *ctx
-);
-extern void secp256k1_context_destroy(
-    secp256k1_context *ctx
-);
-extern void secp256k1_context_set_illegal_callback(
-    secp256k1_context *ctx,
-    void (*fun)(const char *message, void *data),
-    const void *data
+
+secp256k1_context* secp256k1_context_clone(
+    const secp256k1_context* ctx
 );
-extern void secp256k1_context_set_error_callback(
-    secp256k1_context *ctx,
-    void (*fun)(const char *message, void *data),
-    const void *data
+
+void secp256k1_context_destroy(
+    secp256k1_context* ctx
 );
-extern secp256k1_scratch_space *secp256k1_scratch_space_create(
-    const secp256k1_context *ctx,
-    size_t size
+
+void secp256k1_context_set_illegal_callback(
+    secp256k1_context* ctx,
+    void (*fun)(const char* message, void* data),
+    const void* data
 );
-extern void secp256k1_scratch_space_destroy(
-    const secp256k1_context *ctx,
-    secp256k1_scratch_space *scratch
+
+void secp256k1_context_set_error_callback(
+    secp256k1_context* ctx,
+    void (*fun)(const char* message, void* data),
+    const void* data
 );
-extern int secp256k1_ec_pubkey_parse(
-    const secp256k1_context *ctx,
-    secp256k1_pubkey *pubkey,
+
+int secp256k1_ec_pubkey_parse(
+    const secp256k1_context* ctx,
+    secp256k1_pubkey* pubkey,
     const unsigned char *input,
     size_t inputlen
 );
-extern int secp256k1_ec_pubkey_serialize(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_serialize(
+    const secp256k1_context* ctx,
     unsigned char *output,
     size_t *outputlen,
-    const secp256k1_pubkey *pubkey,
+    const secp256k1_pubkey* pubkey,
     unsigned int flags
 );
-extern int secp256k1_ec_pubkey_cmp(
-    const secp256k1_context *ctx,
-    const secp256k1_pubkey *pubkey1,
-    const secp256k1_pubkey *pubkey2
-);
-extern int secp256k1_ecdsa_signature_parse_compact(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_signature *sig,
+
+int secp256k1_ecdsa_signature_parse_compact(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_signature* sig,
     const unsigned char *input64
 );
-extern int secp256k1_ecdsa_signature_parse_der(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_signature *sig,
+
+int secp256k1_ecdsa_signature_parse_der(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_signature* sig,
     const unsigned char *input,
     size_t inputlen
 );
-extern int secp256k1_ecdsa_signature_serialize_der(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_signature_serialize_der(
+    const secp256k1_context* ctx,
     unsigned char *output,
     size_t *outputlen,
-    const secp256k1_ecdsa_signature *sig
+    const secp256k1_ecdsa_signature* sig
 );
-extern int secp256k1_ecdsa_signature_serialize_compact(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_signature_serialize_compact(
+    const secp256k1_context* ctx,
     unsigned char *output64,
-    const secp256k1_ecdsa_signature *sig
+    const secp256k1_ecdsa_signature* sig
 );
-extern int secp256k1_ecdsa_verify(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_verify(
+    const secp256k1_context* ctx,
     const secp256k1_ecdsa_signature *sig,
-    const unsigned char *msghash32,
+    const unsigned char *msg32,
     const secp256k1_pubkey *pubkey
 );
-extern int secp256k1_ecdsa_signature_normalize(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_signature_normalize(
+    const secp256k1_context* ctx,
     secp256k1_ecdsa_signature *sigout,
     const secp256k1_ecdsa_signature *sigin
 );
@@ -129,135 +119,139 @@ extern const secp256k1_nonce_function secp256k1_nonce_function_rfc6979;
 
 extern const secp256k1_nonce_function secp256k1_nonce_function_default;
 
-extern int secp256k1_ecdsa_sign(
-    const secp256k1_context *ctx,
+int secp256k1_ecdsa_sign(
+    const secp256k1_context* ctx,
     secp256k1_ecdsa_signature *sig,
-    const unsigned char *msghash32,
+    const unsigned char *msg32,
     const unsigned char *seckey,
     secp256k1_nonce_function noncefp,
     const void *ndata
 );
-extern int secp256k1_ec_seckey_verify(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_seckey_verify(
+    const secp256k1_context* ctx,
     const unsigned char *seckey
 );
-extern int secp256k1_ec_pubkey_create(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_create(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
     const unsigned char *seckey
 );
-extern int secp256k1_ec_seckey_negate(
-    const secp256k1_context *ctx,
-    unsigned char *seckey
-);
-extern int secp256k1_ec_pubkey_negate(
-    const secp256k1_context *ctx,
-    secp256k1_pubkey *pubkey
-);
-extern int secp256k1_ec_seckey_tweak_add(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_privkey_tweak_add(
+    const secp256k1_context* ctx,
     unsigned char *seckey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_ec_pubkey_tweak_add(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_tweak_add(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_ec_seckey_tweak_mul(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_privkey_tweak_mul(
+    const secp256k1_context* ctx,
     unsigned char *seckey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_ec_pubkey_tweak_mul(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_tweak_mul(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
-    const unsigned char *tweak32
+    const unsigned char *tweak
 );
-extern int secp256k1_context_randomize(
-    secp256k1_context *ctx,
+
+int secp256k1_context_randomize(
+    secp256k1_context* ctx,
     const unsigned char *seed32
 );
-extern int secp256k1_ec_pubkey_combine(
-    const secp256k1_context *ctx,
+
+int secp256k1_ec_pubkey_combine(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *out,
-    const secp256k1_pubkey * const *ins,
+    const secp256k1_pubkey * const * ins,
     size_t n
 );
-extern int secp256k1_tagged_sha256(
-    const secp256k1_context *ctx,
-    unsigned char *hash32,
-    const unsigned char *tag,
-    size_t taglen,
-    const unsigned char *msg,
-    size_t msglen
-);
 """
 
 EXTRAKEYS_DEFINITIONS = """
 typedef struct {
     unsigned char data[64];
 } secp256k1_xonly_pubkey;
+
 typedef struct {
     unsigned char data[96];
 } secp256k1_keypair;
-extern int secp256k1_xonly_pubkey_parse(
-    const secp256k1_context *ctx,
-    secp256k1_xonly_pubkey *pubkey,
+
+int secp256k1_xonly_pubkey_parse(
+    const secp256k1_context* ctx,
+    secp256k1_xonly_pubkey* pubkey,
     const unsigned char *input32
 );
-extern int secp256k1_xonly_pubkey_serialize(
-    const secp256k1_context *ctx,
+
+int secp256k1_xonly_pubkey_serialize(
+    const secp256k1_context* ctx,
     unsigned char *output32,
-    const secp256k1_xonly_pubkey *pubkey
+    const secp256k1_xonly_pubkey* pubkey
 );
-extern int secp256k1_xonly_pubkey_cmp(
-    const secp256k1_context *ctx,
-    const secp256k1_xonly_pubkey *pk1,
-    const secp256k1_xonly_pubkey *pk2
+
+int secp256k1_xonly_pubkey_cmp(
+    const secp256k1_context* ctx,
+    const secp256k1_xonly_pubkey* pk1,
+    const secp256k1_xonly_pubkey* pk2
 );
-extern int secp256k1_xonly_pubkey_from_pubkey(
-    const secp256k1_context *ctx,
+
+int secp256k1_xonly_pubkey_from_pubkey(
+    const secp256k1_context* ctx,
     secp256k1_xonly_pubkey *xonly_pubkey,
     int *pk_parity,
     const secp256k1_pubkey *pubkey
 );
-extern int secp256k1_xonly_pubkey_tweak_add(
-    const secp256k1_context *ctx,
+
+int secp256k1_xonly_pubkey_tweak_add(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *output_pubkey,
     const secp256k1_xonly_pubkey *internal_pubkey,
     const unsigned char *tweak32
 );
-extern int secp256k1_xonly_pubkey_tweak_add_check(
-    const secp256k1_context *ctx,
+
+int secp256k1_xonly_pubkey_tweak_add_check(
+    const secp256k1_context* ctx,
     const unsigned char *tweaked_pubkey32,
     int tweaked_pk_parity,
     const secp256k1_xonly_pubkey *internal_pubkey,
     const unsigned char *tweak32
 );
-extern int secp256k1_keypair_create(
-    const secp256k1_context *ctx,
+
+int secp256k1_keypair_create(
+    const secp256k1_context* ctx,
     secp256k1_keypair *keypair,
     const unsigned char *seckey
 );
-extern int secp256k1_keypair_sec(
-    const secp256k1_context *ctx,
+
+int secp256k1_keypair_sec(
+    const secp256k1_context* ctx,
     unsigned char *seckey,
     const secp256k1_keypair *keypair
 );
-extern int secp256k1_keypair_pub(
-    const secp256k1_context *ctx,
+
+int secp256k1_keypair_pub(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
     const secp256k1_keypair *keypair
 );
-extern int secp256k1_keypair_xonly_pub(
-    const secp256k1_context *ctx,
+
+int secp256k1_keypair_xonly_pub(
+    const secp256k1_context* ctx,
     secp256k1_xonly_pubkey *pubkey,
     int *pk_parity,
     const secp256k1_keypair *keypair
 );
-extern int secp256k1_keypair_xonly_tweak_add(
-    const secp256k1_context *ctx,
+
+int secp256k1_keypair_xonly_tweak_add(
+    const secp256k1_context* ctx,
     secp256k1_keypair *keypair,
     const unsigned char *tweak32
 );
@@ -267,36 +261,41 @@ RECOVERY_DEFINITIONS = """
 typedef struct {
     unsigned char data[65];
 } secp256k1_ecdsa_recoverable_signature;
-extern int secp256k1_ecdsa_recoverable_signature_parse_compact(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_recoverable_signature *sig,
+
+int secp256k1_ecdsa_recoverable_signature_parse_compact(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_recoverable_signature* sig,
     const unsigned char *input64,
     int recid
 );
-extern int secp256k1_ecdsa_recoverable_signature_convert(
-    const secp256k1_context *ctx,
-    secp256k1_ecdsa_signature *sig,
-    const secp256k1_ecdsa_recoverable_signature *sigin
+
+int secp256k1_ecdsa_recoverable_signature_convert(
+    const secp256k1_context* ctx,
+    secp256k1_ecdsa_signature* sig,
+    const secp256k1_ecdsa_recoverable_signature* sigin
 );
-extern int secp256k1_ecdsa_recoverable_signature_serialize_compact(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_recoverable_signature_serialize_compact(
+    const secp256k1_context* ctx,
     unsigned char *output64,
     int *recid,
-    const secp256k1_ecdsa_recoverable_signature *sig
+    const secp256k1_ecdsa_recoverable_signature* sig
 );
-extern int secp256k1_ecdsa_sign_recoverable(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_sign_recoverable(
+    const secp256k1_context* ctx,
     secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msghash32,
+    const unsigned char *msg32,
     const unsigned char *seckey,
     secp256k1_nonce_function noncefp,
     const void *ndata
 );
-extern int secp256k1_ecdsa_recover(
-    const secp256k1_context *ctx,
+
+int secp256k1_ecdsa_recover(
+    const secp256k1_context* ctx,
     secp256k1_pubkey *pubkey,
     const secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msghash32
+    const unsigned char *msg32
 );
 """
 
@@ -311,29 +310,42 @@ typedef int (*secp256k1_nonce_function_hardened)(
     size_t algolen,
     void *data
 );
+
 extern const secp256k1_nonce_function_hardened secp256k1_nonce_function_bip340;
+
 typedef struct {
     unsigned char magic[4];
     secp256k1_nonce_function_hardened noncefp;
-    void *ndata;
+    void* ndata;
 } secp256k1_schnorrsig_extraparams;
-extern int secp256k1_schnorrsig_sign32(
-    const secp256k1_context *ctx,
+
+int secp256k1_schnorrsig_sign(
+    const secp256k1_context* ctx,
     unsigned char *sig64,
     const unsigned char *msg32,
     const secp256k1_keypair *keypair,
     const unsigned char *aux_rand32
 );
-extern int secp256k1_schnorrsig_sign_custom(
-    const secp256k1_context *ctx,
+
+int secp256k1_schnorrsig_sign32(
+    const secp256k1_context* ctx,
+    unsigned char *sig64,
+    const unsigned char *msg32,
+    const secp256k1_keypair *keypair,
+    const unsigned char *aux_rand32
+);
+
+int secp256k1_schnorrsig_sign_custom(
+    const secp256k1_context* ctx,
     unsigned char *sig64,
     const unsigned char *msg,
     size_t msglen,
     const secp256k1_keypair *keypair,
     secp256k1_schnorrsig_extraparams *extraparams
 );
-extern int secp256k1_schnorrsig_verify(
-    const secp256k1_context *ctx,
+
+int secp256k1_schnorrsig_verify(
+    const secp256k1_context* ctx,
     const unsigned char *sig64,
     const unsigned char *msg,
     size_t msglen,
@@ -342,83 +354,16 @@ extern int secp256k1_schnorrsig_verify(
 """
 
 ECDH_DEFINITIONS = """
-typedef int (*secp256k1_ecdh_hash_function)(
-  unsigned char *output,
-  const unsigned char *x32,
-  const unsigned char *y32,
-  void *data
-);
-extern const secp256k1_ecdh_hash_function secp256k1_ecdh_hash_function_sha256;
-extern const secp256k1_ecdh_hash_function secp256k1_ecdh_hash_function_default;
-extern int secp256k1_ecdh(
-  const secp256k1_context *ctx,
-  unsigned char *output,
+int secp256k1_ecdh(
+  const secp256k1_context* ctx,
+  unsigned char *result,
   const secp256k1_pubkey *pubkey,
-  const unsigned char *seckey,
-  secp256k1_ecdh_hash_function hashfp,
-  void *data
-);
-"""
-
-ELLSWIFT_DEFINITIONS = """
-typedef int (*secp256k1_ellswift_xdh_hash_function)(
-    unsigned char *output,
-    const unsigned char *x32,
-    const unsigned char *ell_a64,
-    const unsigned char *ell_b64,
-    void *data
-);
-extern const secp256k1_ellswift_xdh_hash_function secp256k1_ellswift_xdh_hash_function_prefix;
-extern const secp256k1_ellswift_xdh_hash_function secp256k1_ellswift_xdh_hash_function_bip324;
-extern int secp256k1_ellswift_encode(
-    const secp256k1_context *ctx,
-    unsigned char *ell64,
-    const secp256k1_pubkey *pubkey,
-    const unsigned char *rnd32
-);
-extern int secp256k1_ellswift_decode(
-    const secp256k1_context *ctx,
-    secp256k1_pubkey *pubkey,
-    const unsigned char *ell64
-);
-extern int secp256k1_ellswift_create(
-    const secp256k1_context *ctx,
-    unsigned char *ell64,
-    const unsigned char *seckey32,
-    const unsigned char *auxrnd32
-);
-extern int secp256k1_ellswift_xdh(
-  const secp256k1_context *ctx,
-  unsigned char *output,
-  const unsigned char *ell_a64,
-  const unsigned char *ell_b64,
-  const unsigned char *seckey32,
-  int party,
-  secp256k1_ellswift_xdh_hash_function hashfp,
+  const unsigned char *privkey,
+  void *hashfp,
   void *data
 );
 """
 
-PREALLOCATED_DEFINITIONS = """
-extern size_t secp256k1_context_preallocated_size(
-    unsigned int flags
-);
-extern secp256k1_context *secp256k1_context_preallocated_create(
-    void *prealloc,
-    unsigned int flags
-);
-extern size_t secp256k1_context_preallocated_clone_size(
-    const secp256k1_context *ctx
-);
-extern secp256k1_context *secp256k1_context_preallocated_clone(
-    const secp256k1_context *ctx,
-    void *prealloc
-);
-extern void secp256k1_context_preallocated_destroy(
-    secp256k1_context *ctx
-);
-"""
-
 ffi = FFI()
 
 ffi.cdef(BASE_DEFINITIONS)
@@ -429,4 +374,3 @@ ffi.cdef(ECDH_DEFINITIONS)
 
 here = os.path.dirname(os.path.abspath(__file__))
 lib = ffi.dlopen(os.path.join(here, 'libsecp256k1.dll'))
-
diff --git a/coincurve/context.py b/coincurve/context.py
index 03e0923..e22f74e 100644
--- a/coincurve/context.py
+++ b/coincurve/context.py
@@ -1,6 +1,5 @@
 from os import urandom
 from threading import Lock
-from typing import Optional
 
 from coincurve.flags import CONTEXT_ALL, CONTEXT_FLAGS
 
@@ -8,9 +7,9 @@ from ._libsecp256k1 import ffi, lib
 
 
 class Context:
-    def __init__(self, seed: Optional[bytes] = None, flag=CONTEXT_ALL, name: str = ''):
+    def __init__(self, seed: bytes = None, flag=CONTEXT_ALL, name: str = ''):
         if flag not in CONTEXT_FLAGS:
-            raise ValueError(f'{flag} is an invalid context flag.')
+            raise ValueError('{} is an invalid context flag.'.format(flag))
         self._lock = Lock()
 
         self.ctx = ffi.gc(lib.secp256k1_context_create(flag), lib.secp256k1_context_destroy)
@@ -18,15 +17,14 @@ class Context:
 
         self.name = name
 
-    def reseed(self, seed: Optional[bytes] = None):
+    def reseed(self, seed: bytes = None):
         """
         Protects against certain possible future side-channel timing attacks.
         """
         with self._lock:
             seed = urandom(32) if not seed or len(seed) != 32 else seed
             res = lib.secp256k1_context_randomize(self.ctx, ffi.new('unsigned char [32]', seed))
-            if not res:
-                raise ValueError('secp256k1_context_randomize')
+            assert res == 1
 
     def __repr__(self):
         return self.name or super().__repr__()
diff --git a/coincurve/ecdsa.py b/coincurve/ecdsa.py
index 3b9915e..dca768c 100644
--- a/coincurve/ecdsa.py
+++ b/coincurve/ecdsa.py
@@ -76,8 +76,7 @@ def serialize_compact(raw_sig, context: Context = GLOBAL_CONTEXT):  # no cov
     output = ffi.new('unsigned char[%d]' % CDATA_SIG_LENGTH)
 
     res = lib.secp256k1_ecdsa_signature_serialize_compact(context.ctx, output, raw_sig)
-    if not res:
-        raise ValueError('secp256k1_ecdsa_signature_serialize_compact')
+    assert res == 1
 
     return bytes(ffi.buffer(output, CDATA_SIG_LENGTH))
 
@@ -88,8 +87,7 @@ def deserialize_compact(ser_sig: bytes, context: Context = GLOBAL_CONTEXT):  # n
 
     raw_sig = ffi.new('secp256k1_ecdsa_signature *')
     res = lib.secp256k1_ecdsa_signature_parse_compact(context.ctx, raw_sig, ser_sig)
-    if not res:
-        raise ValueError('secp256k1_ecdsa_signature_parse_compact')
+    assert res == 1
 
     return raw_sig
 
diff --git a/coincurve/keys.py b/coincurve/keys.py
index 3285bd2..918b4b3 100644
--- a/coincurve/keys.py
+++ b/coincurve/keys.py
@@ -1,5 +1,5 @@
 import os
-from typing import Optional, Tuple
+from typing import Tuple
 
 from asn1crypto.keys import ECDomainParameters, ECPointBitString, ECPrivateKey, PrivateKeyAlgorithm, PrivateKeyInfo
 
@@ -24,7 +24,7 @@ from ._libsecp256k1 import ffi, lib
 
 
 class PrivateKey:
-    def __init__(self, secret: Optional[bytes] = None, context: Context = GLOBAL_CONTEXT):
+    def __init__(self, secret: bytes = None, context: Context = GLOBAL_CONTEXT):
         """
         :param secret: The secret used to initialize the private key.
                        If not provided or `None`, a new key will be generated.
@@ -159,7 +159,7 @@ class PrivateKey:
 
         secret = ffi.new('unsigned char [32]', self.secret)
 
-        success = lib.secp256k1_ec_seckey_tweak_add(self.context.ctx, secret, scalar)
+        success = lib.secp256k1_ec_privkey_tweak_add(self.context.ctx, secret, scalar)
 
         if not success:
             raise ValueError('The tweak was out of range, or the resulting private key is invalid.')
@@ -186,7 +186,7 @@ class PrivateKey:
 
         secret = ffi.new('unsigned char [32]', self.secret)
 
-        lib.secp256k1_ec_seckey_tweak_mul(self.context.ctx, secret, scalar)
+        lib.secp256k1_ec_privkey_tweak_mul(self.context.ctx, secret, scalar)
 
         secret = bytes(ffi.buffer(secret, 32))
 
@@ -407,7 +407,7 @@ class PublicKey:
 
         return PublicKey(public_key, context)
 
-    def format(self, compressed: bool = True) -> bytes:  # noqa: A003
+    def format(self, compressed: bool = True) -> bytes:
         """
         Format the public key.
 
@@ -579,7 +579,7 @@ class PublicKeyXOnly:
 
         return cls(xonly_pubkey, parity=not not pk_parity[0], context=context)
 
-    def format(self) -> bytes:  # noqa: A003
+    def format(self) -> bytes:
         """Serialize the public key.
 
         :return: The public key serialized as 32 bytes.
diff --git a/coincurve/utils.py b/coincurve/utils.py
index 731a1df..1fbda65 100644
--- a/coincurve/utils.py
+++ b/coincurve/utils.py
@@ -27,18 +27,18 @@ if environ.get('COINCURVE_BUILDING_DOCS') != 'true':
 
 else:  # no cov
 
-    class __Nonce(tuple):  # noqa: N801
+    class __Nonce(tuple):
         def __repr__(self):
             return '(ffi.NULL, ffi.NULL)'
 
-    class __HasherSHA256:  # noqa: N801
+    class __HasherSHA256:
         def __call__(self, bytestr: bytes) -> bytes:
             return _sha256(bytestr).digest()
 
         def __repr__(self):
             return 'sha256'
 
-    DEFAULT_NONCE = __Nonce((ffi.NULL, ffi.NULL))
+    DEFAULT_NONCE = __Nonce((ffi.NULL, ffi.NULL))  # type: ignore
     sha256 = __HasherSHA256()
 
 
@@ -88,7 +88,7 @@ def pad_scalar(scalar: bytes) -> bytes:
 
 def validate_secret(secret: bytes) -> bytes:
     if not 0 < bytes_to_int(secret) < GROUP_ORDER_INT:
-        raise ValueError(f'Secret scalar must be greater than 0 and less than {GROUP_ORDER_INT}.')
+        raise ValueError('Secret scalar must be greater than 0 and less than {}.'.format(GROUP_ORDER_INT))
     return pad_scalar(secret)
 
 
diff --git a/docs/history.md b/docs/history.md
index 344ffc7..954d4d5 100644
--- a/docs/history.md
+++ b/docs/history.md
@@ -8,12 +8,6 @@ Important changes are emphasized.
 
 ## Unreleased
 
-## 19.0.0
-
-- **Breaking:** Drop support for Python 3.7
-- Add support for Python 3.12
-- Upgrade [libsecp256k1][] to version 0.4.1
-
 ## 18.0.0
 
 - Support Schnorr signatures
diff --git a/docs/index.md b/docs/index.md
index 737545e..26ddea1 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -26,6 +26,7 @@ C library used by [Bitcoin Core][] for operations on the elliptic curve [secp256
 
 - [Ethereum](https://ethereum.org)
 - [LBRY](https://lbry.com)
+- [ZeroNet](https://zeronet.io)
 - [libp2p](https://libp2p.io)
 
 and [many more](users.md)!
diff --git a/docs/install.md b/docs/install.md
index b37e1ff..3e41602 100644
--- a/docs/install.md
+++ b/docs/install.md
@@ -19,7 +19,6 @@ Binary wheels are available for most platforms and require at least version `19.
 | CPython 3.8 | <ul><li>x86_64</li><li>ARM64</li></ul> | <ul><li>x86_64</li><li>x86</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> |
 | CPython 3.9 | <ul><li>x86_64</li><li>ARM64</li></ul> | <ul><li>x86_64</li><li>x86</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> |
 | CPython 3.10 | <ul><li>x86_64</li><li>ARM64</li></ul> | <ul><li>x86_64</li><li>x86</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> |
-| CPython 3.11 | <ul><li>x86_64</li><li>ARM64</li></ul> | <ul><li>x86_64</li><li>x86</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> | <ul><li>x86_64</li><li>i686</li><li>AArch64</li></ul> |
 
 ## Source
 
diff --git a/docs/users.md b/docs/users.md
index 4a93a6e..e118210 100644
--- a/docs/users.md
+++ b/docs/users.md
@@ -40,4 +40,4 @@
 - [python-idex](https://github.com/sammchardy/python-idex/blob/24cee970172491a7f7d5f52558727a77384cce26/requirements.txt#L2)
 - [Rotki](https://github.com/rotki/rotki/blob/70508f99f890bcbd520f1efe7776194d6a5e5e06/requirements.txt#L8)
 - [Vyper](https://github.com/vyperlang/vyper/blob/3bd0bf96856554810065fa9cfb89afef7625d436/Dockerfile#L15)
-- [ZeroNet](https://github.com/zeronet-conservancy/zeronet-conservancy/blob/b6e18fd3738b4725726c5e170040deb3048c9048/requirements.txt#L12)
+- [ZeroNet](https://github.com/HelloZeroNet/ZeroNet/blob/454c0b2e7e000fda7000cba49027541fbf327b96/requirements.txt#L12)
diff --git a/pyproject.toml b/pyproject.toml
index bb604ad..50e14bb 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -4,7 +4,7 @@
 
 [project]
 name = "coincurve"
-version = "19.0.0"
+version = "18.0.0"
 authors = [
   { name="Ofek Lev", email="oss@ofek.dev" },
 ]
